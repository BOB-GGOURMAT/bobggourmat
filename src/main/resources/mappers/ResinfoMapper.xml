<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.bobggourmat.dao.ResinfoDAO">

	<!-- 1. select_ 식당 한개 정보 가져오기 -->
	<select id="selectByIdx" resultType="ResinfoVO" parameterType="int">
		select
		   r.*,l.*,c1.*,avg(comment_star) resinfo_star
		from
	    	resinfo r, category c1, location l,comment c2
		where
		    r.location_idx = l.location_idx
		    and
			r.category_idx = c1.category_idx
			and
			r.resinfo_idx = c2.resinfo_idx
			and
			r.resinfo_idx = #{resinfo_idx}
	</select>

	<!-- 2. select_ 지역 이름 가져오기 -->
	<select id="location_name" resultType="String" parameterType="int">
		select location_name from location where location_idx = #{location_idx}
	</select>

	<!-- 3. select_ 카테고리 이름 가져오기 -->
	<select id="category_name" resultType="String" parameterType="int">
		select category_name from category where category_idx = #{category_idx}
	</select>

	<!-- 4. select_ 지역별 식당 리스트 가져오기 -->
	<select id="location_resinfo" resultType="ResinfoVO" parameterType="int">
		select
		    r.resinfo_name , c.category_name , r.resinfo_mainphoto, r.resinfo_idx
		from
		    resinfo r ,category c ,location l
		where
			r.location_idx = l.location_idx
			and
			r.category_idx = c.category_idx
			and
			l.location_idx = #{location_idx}
	</select>

	<!-- 5. select_ 카테고리별 식당 리스트 가져오기 -->
	<select id="category_resinfo" resultType="ResinfoVO" parameterType="int">
		select
		r.resinfo_name , l.location_name , r.resinfo_mainphoto, r.resinfo_idx
		from
		  resinfo r ,category c ,location l
		where
			r.location_idx = l.location_idx
			and
			r.category_idx = c.category_idx
			and
			c.category_idx = #{category_idx}
	</select>

	<!-- 6. select_ 저장한 식당 리스트 가져오기 -->
	<select id="save_resinfo" resultType="ResinfoVO" parameterType="int">
	select
	r.resinfo_name , c.category_name , l.location_name, r.resinfo_mainphoto, r.resinfo_mainphoto, r.resinfo_idx
	from
	resinfo r ,category c ,location l ,user u ,save s
	where
		s.user_idx = u.user_idx
		and
		s.resinfo_idx = r.resinfo_idx
		and
		r.category_idx = c.category_idx
		and
		r.location_idx = l.location_idx
		and
		u.user_idx = #{user_idx}
	</select>
    
    <!-- 8. select_카테고리 식당 별점 가져오기-->
    <select id="category_star" resultType="ResinfoVO" parameterType="ResinfoVO" >
      select
         r.resinfo_idx ,avg(c2.comment_star) resinfo_star
      from 
         comment c2, resinfo r, category c1
      where 
         c2.resinfo_idx = r.resinfo_idx
         and
		 r.category_idx = c1.category_idx
		 and
		 r.category_idx = #{category_idx}
		 and
		 r.resinfo_idx = #{resinfo_idx}
    </select>

    <!-- 9. select_지역 식당 별점 가져오기-->
    <select id="location_star" resultType="ResinfoVO" parameterType="ResinfoVO" >
      select
         r.resinfo_idx ,avg(c.comment_star) resinfo_star
      from 
         comment c, resinfo r, location l
      where 
         c.resinfo_idx = r.resinfo_idx
         and
		 r.location_idx = l.location_idx
		 and
		 r.location_idx = #{location_idx}
		 and
		 r.resinfo_idx = #{resinfo_idx}
    </select>

	<!-- 검색 기능 구수현 -->
	<select parameterType="string" resultType="ResinfoVO" id="search">
		select r.resinfo_idx, r.resinfo_name, l.location_name,
		r.resinfo_mainphoto, c.category_name, m.menu_name
		from resinfo r, location l, category c, menu m
		where(r.resinfo_name like CONCAT('%',#{keyword},'%')
		or r.resinfo_address like CONCAT('%',#{keyword},'%')
		or m.menu_name like CONCAT('%',#{keyword},'%'))
		and r.category_idx = c.category_idx
		and r.location_idx = l.location_idx
		and r.resinfo_idx =	m.resinfo_idx
		GROUP BY r.resinfo_idx;
	</select>

</mapper>